install.packages('nnet')
install.packages('caret')
install.packages('NeuralNetTools')
library(caret)
library(nnet)
library(NeuralNetTools)

#1 ESERCIZIO
set.seed(123)

random <- runif(nrow(iris))
iris2 <- iris[order(random),]
head(iris2)
train <- iris2[1:100, ]
test <- iris2[101:150,]
#nnet(Variabile da predire, tilde significa tutte le variabili (esclusa species) del dataset train, size è il numero di unità nello strato nascosto, rang indica i pesi casuali, max it rappresenta il numero di iterazioni dette anche ere)
nn <- nnet(Species ~. , train, size = 2, rang = 0.1, maxit = 1000)
summary(nn)
print(nn)
#Cosa cambia all'aumentare o al diminuire delle ere?
#nn50Ere <- nnet(Species ~., trainIris2, size = 2, rang = 0.1, maxit = 50 )
#summary(nn50Ere)
#print(nn50Ere)

pred <- predict(nn, test, type = 'class')
table(test$Species, pred)

#Per avere più informazioni su accuratezza utilizzare il pacchetto caret
confusionMatrix(test$Species, pred)

plotnet(nn)
#pred50 <- predict(nn50Ere, testIris2, type = 'class')
#table(testIris2$Species, pred50)
#confusionMatrix(testIris2$Species, pred50)

#2 ESERCIZIO
install.packages('neuralnet')
install.packages('mlbench')
library(neuralnet)
library(mlbench)

data("PimaIndiansDiabetes")

ppid <- PimaIndiansDiabetes

#Diamo un occhiata ai dati
View(ppid)
summary(ppid)
head(ppid)
dim(ppid)

#Soggetto diabetico oppure no (pos per i positivi e neg per negativi).
#Se ppid$diabetes è uguale a pos trasforma in 1 altrimenti in 0.
ppid$diabetes <- ifelse(ppid$diabetes == "pos", 1, 0)
View(ppid)

train <- ppid[1:500, ]
test <- ppid[501:768, ]
head(train)

#rispetto a nnet devo indicare tutte le variabili per nome, err fct indica la funzione che calcola l'errore linear output e likelihood uguale, step max indica ere
nn2 <- neuralnet(diabetes ~ pregnant + glucose + pressure + triceps + insulin + mass + pedigree + age, train, err.fct = 'ce', linear.output = FALSE, likelihood = TRUE, stepmax = 1e6)
#Rispetto a nnet ci sono i pesi su ogni ramo
plot(nn2)

#rispetto a nnet ha più informazioni
nn2$net.result
nn2$weights
nn2$result.matrix
nn2$covariate

#Creo un grafico che indica l'importanza dei predittori in base ai pesi della neural network
garson(nn2)
olden(nn2)

#Accuratezza nnTest contiene i valori delle predizioni nella colonna nt.result
nnTest <- compute(nn2, test[, 1:8])

#Se output è superiore a 0,5 è diabetico altrimenti no
predict <- ifelse(nnTest$nt.result > 0.5, 1, 0)

table(predict, test$diabetes)

confusionMatrix(predict, test$diabetes)
